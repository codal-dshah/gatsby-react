import type { AnalyticsTracker, IAggregateStats, ITelemetryTagsPayload, ITelemetryOptsPayload, IDefaultTelemetryTagsPayload } from "./telemetry";
import type { Request, Response } from "express";
export declare const flush: () => Promise<void>;
export declare function trackFeatureIsUsed(_name: string): void;
export declare function trackCli(_input: string | Array<string>, _tags?: ITelemetryTagsPayload, _opts?: ITelemetryOptsPayload): void;
export declare function captureEvent(_input: string | Array<string>, _tags?: ITelemetryTagsPayload, _opts?: ITelemetryOptsPayload): void;
export declare function trackError(_input: string, _tags?: ITelemetryTagsPayload): void;
export declare function trackBuildError(_input: string, _tags?: ITelemetryTagsPayload): void;
export declare function setDefaultTags(_tags: IDefaultTelemetryTagsPayload): void;
export declare function decorateEvent(_event: string, _tags?: Record<string, unknown>): void;
export declare function setTelemetryEnabled(_enabled: boolean): void;
export declare function startBackgroundUpdate(): void;
export declare function isTrackingEnabled(): boolean;
export declare function aggregateStats(data: Array<number>): IAggregateStats;
export declare function addSiteMeasurement(_event: string, _obj: ITelemetryTagsPayload["siteMeasurements"]): void;
export declare function expressMiddleware(_source: string): (_req: Request, _res: Response, next: any) => void;
export declare function setDefaultComponentId(_componentId: string): void;
export declare function setGatsbyCliVersion(_version: string): void;
export { AnalyticsTracker, IAggregateStats, ITelemetryTagsPayload, ITelemetryOptsPayload, IDefaultTelemetryTagsPayload, };
